'''
Created on Mar 26, 2013

@author: derricw


terrain.py

This is a terrain object made to store parameters for training.

The property "params" allows you to append parameter sets of the form:

{'name':'parametername','possible':[PossibleValues],'correct':[CorrectValues],'relevance':RelevanceBool}

Where:
'name' is a string cooresponding to any possible property of a Psychopy stimulus.
[PossibleValues] is a list of possible values to be chosen from.  It does not have to contain the correct values.
[CorrectValues] is a list of values considered to be "correct".
RelevanceBool determines whether or not a correct value is required for the current selection to be consider "correct."

After these are set, new() gets a new random value set based on the defined parameters.
    It will always be the same length as the number of values.
You can also use correct() and incorrect() to set the object to a random correct or incorrect
    value.

#------------------------------------------------------------------------------ 

#Example use:


from Terrain import Terrain

t = Terrain()
t.params.append({'name':Color','possible':[-1,0,1],'correct':[1],'relevance':True})            #set up color
t.params.append({'name':Ori','possible':range(0,360,45),'correct':[0,45],'relevance':True})    #set up orientation
t.correctfreq = 0.5       #frequency that a correct value is generated by new()
t.current = [-1,45]       #starting values for all parameters
t.lapdistance = 2500      #distance in pixels between objects
t.windowwidth = 300       #space (pixels) where objects need to be held to grant a reward
t.selectiontime = 30      #time  (frames) that objects need to be held to grand a reward

t.new()                   #get new random object from parameter arrays
print t.current           #print the new values

#------------------------------------------------------------------------------ 

'''
import random
import time

#===============================================================================
# Terrain
#===============================================================================

class Terrain(object):
    """Terrain Setup"""
    def __init__(self, params = []):
        """Initializes defaults.  All can be adjusted after construction."""
        
        #Set up container for parameters
        self.params = params

        #Starting params
        self.current = []

        #Misc properties
        self.correctfreq = 0.5 #freq of correct stimuli
        self.selectiontime = 30 #how long (in frames) correct stimuli needs to be held in place
                              ##TODO: convert to seconds based on vsync
        self.windowwidth = 200 #width of correct window (pixels)
        self.lapdistance = 1920 #distance between stimuli in pixels (should be higher than screen size /2)
        self.speedgain = 1 #gain of encoder degrees to pixels
        self.objectwidthDeg = 20 #width of stimulus object
        
        self.iscorrect = False #state variable for whether or not current stimulus is correct
        
    def __repr__(self):
        return 'Terrain(params = '+ self.params + ')'
        
    def new(self):
        """Gets new terrain settings"""
        if random.random() < self.correctfreq:
            self.correct()
        else:
            self.incorrect()

    def correct(self):
        """Sets the terrain to correct"""
        self.current = []
        for p in self.params:
            if p['relevance']:
                self.current.append(random.choice(p['correct']))
            else:
                self.current.append(random.choice(p['possible']))
        self.iscorrect = True
        
    def incorrect(self):
        """Sets the terrain to incorrect"""
        ##TODO: Find a more elegant way to do this...
        self.current = []
        flag = 0
        rel = 0
        for p in self.params:
            self.current.append(random.choice(p['possible']))
        for i in range(len(self.params)):
            if (self.current[i] in self.params[i]['correct']) and self.params[i]['relevance']:
                flag +=1
            if self.params[i]['relevance']:
                rel +=1
        if flag == rel and rel !=0:
            self.incorrect() #enough values are correct, get a new one
        self.iscorrect = False


if __name__ == "__main__":
    t = Terrain()
    t.params.append({'name':'Color','possible':[-1,0,1],'correct':[1],'relevance':True})
    t.params.append({'name':'Ori','possible':range(0,360,45),'correct':[0,45],'relevance':True})
    t.current = [-1,45]
    print t.params
    for i in range(100):
        print t.iscorrect
        print t.current
        t.new()
